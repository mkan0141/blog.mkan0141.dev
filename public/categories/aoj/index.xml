<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AOJ on mkan0141&#39;s blog</title>
    <link>https://mkan0141.dev/categories/aoj/</link>
    <description>Recent content in AOJ on mkan0141&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 21 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mkan0141.dev/categories/aoj/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AOJ 1619 弁当作り (Making Lunch Boxes)</title>
      <link>https://mkan0141.dev/blog/aoj-1619-makinglunchboxes/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mkan0141.dev/blog/aoj-1619-makinglunchboxes/</guid>
      <description>問題 Making Lunch Boxes
解法 制約に N * M &amp;lt;= 500と書いていて，NとMはどちらかが必ず22以下になるが分かる． これに気がつけば，N &amp;lt;= 22の時はレシピを使うか使わないかの全探索， M &amp;lt;= 22の時は材料を使うか使わないかのbitDPをすれば良い．
ソースコード typedef long long ll; bool b[505][505]; ll lists[505]; /* ---- bitDP part ----*/ void init_bitDP(int n,int m){ /* create bit list */ for(int i=0;i&amp;lt;n;i++){ lists[i]=0; for(int j=0;j&amp;lt;m;j++){ if(b[i][j])lists[i]|=(1&amp;lt;&amp;lt;j); } } } int bitDP(int n,int m){ vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;dp(n+1,vector&amp;lt;int&amp;gt;((1&amp;lt;&amp;lt;m),-1)); for(int i=0;i&amp;lt;n;i++){ for(int j=0;j&amp;lt;(1&amp;lt;&amp;lt;m);j++){ dp[i][j]=-INF; } } dp[0][0]=0; for(int i=1;i&amp;lt;=n;i++){ for(int j=0;j&amp;lt;(1&amp;lt;&amp;lt;m);j++){ dp[i][j]=max(dp[i-1][j],dp[i-1][j^lists[i-1]]+1); } } return dp[n][0]; } /* ---- dfs part ---- */ void init_dfs(bool used[]){ for(int i=0;i&amp;lt;505;i++){ used[i]=false; } } int dfs_calc(int n,int m,bool used[]){ int ret=0; for(int i=0;i&amp;lt;n;i++)ret+=used[i]; for(int i=0;i&amp;lt;m;i++){ int sum=0; for(int j=0;j&amp;lt;n;j++){ if(used[j])sum+=b[j][i]; } if(sum%2)return -1; } return ret; } int dfs(int n,int m,int cnt,bool used[]){ int ret=0; if(n==cnt){ return dfs_calc(n,m,used); } used[cnt]=true; ret=max(ret,dfs(n,m,cnt+1,used)); used[cnt]=false; ret=max(ret,dfs(n,m,cnt+1,used)); return ret; } /* ---- main ---- */ void solve(int n,int m){ char c; for(int i=0;i&amp;lt;n;i++){ for(int j=0;j&amp;lt;m;j++){ cin&amp;gt;&amp;gt;c; b[i][j]=c-&amp;#39;0&amp;#39;; } } if(n&amp;lt;=m){ bool used[505]; init_dfs(used); cout&amp;lt;&amp;lt;dfs(n,m,0,used)&amp;lt;&amp;lt;endl; }else{ init_bitDP(n,m); cout&amp;lt;&amp;lt;bitDP(n,m)&amp;lt;&amp;lt;endl;; } } int main(){ int n,m; while(scanf(&amp;#34;%d%d&amp;#34;,&amp;amp;n,&amp;amp;m),n|m){ solve(n,m); } return 0; } </description>
    </item>
    
    <item>
      <title>AOJ2613 Unordered Operators</title>
      <link>https://mkan0141.dev/blog/aoj-2613-unorderedoperators/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mkan0141.dev/blog/aoj-2613-unorderedoperators/</guid>
      <description>※構文解析パートは構文解析Howtoを見て書いています．
問題 &amp;lsquo;+&amp;rsquo; , &amp;lsquo;-&#39;, &amp;lsquo;*&amp;lsquo;の3つの演算子を使った式が与えられる． それぞれの演算子の優先順位を変えて得られる値の最大値を求めろ．
解法(もとい実装方法) notさんの解法記事にも書かれているが，優先順位が全て同じ時は以下のコードになる．
int expression(State &amp;amp;begin) { int ret = term(begin); while (1) { if (*begin == &amp;#39;+&amp;#39;) { begin++; ret += term(begin); } else if (*begin == &amp;#39;-&amp;#39;) { begin++; ret -= term(begin); } else if (*begin == &amp;#39;*&amp;#39;) { begin++; ret *= term(begin); } else { break; } } return ret; } このコードを3つ複製して，それぞれに優先順位をつけるような条件式を付け加えれば，優先順位が3つあるコードが出来上がる．
次に優先順位の実装を考える． 今回は3bitの数字3つ(priority[3])で管理する．3bitの数字は，1bit目が立っていれば&#39;+&amp;rsquo;，2bit目が立っていれば&amp;rsquo;-&#39;，3bit目が立っていれば&amp;rsquo;*&amp;lsquo;を使うことを表し，3つの数字はそれぞれの優先順位を表す．例えば以下のようになる．
priority[0] = (001) // 三番目に優先順位が高いのは &amp;#39;+&amp;#39; priority[1] = (100) // 二番目に優先順位が高いのは &amp;#39;*&amp;#39; priority[2] = (010) // 最も優先順位が高いのは &amp;#39;-&amp;#39; 上記のコードにこの優先順位を適応させたコードは以下のようになる．</description>
    </item>
    
  </channel>
</rss>